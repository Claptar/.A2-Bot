import os
import random
import re

import numpy as np
import pandas as pd
import requests
import telebot
from telebot import types

import texting.texting_symbols
import timetable.timetable
from math_module import math_part

base_url = 'https://api.telegram.org/bot838117295:AAGUldfunZu6Cyx-kJkCucQuH3pCLBD4Jcg/'
TOKEN = '838117295:AAGUldfunZu6Cyx-kJkCucQuH3pCLBD4Jcg'
PATH = os.path.abspath('')
bot = telebot.TeleBot(TOKEN)
MESSAGE_NUM = 0
MESSAGE_COM = ''
Q_NUM = 0
PAR_NUM = 0
GROUP_NUM = ''
SUBJECT_NOW = ''
Q_SEQUENCE = []
SUBJECTS_PATH = {
    '–ú–∞—Ç–∞–Ω': 'math',
    '–•–∏–º–∏—è': 'chem_org'
}
SUBJECTS = {
    '–ú–∞—Ç–∞–Ω':
        {'–ú–Ω–æ–∂–µ—Å—Ç–≤–æ Rn': 1,
         '–ü—Ä–µ–¥–µ–ª –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å': 2,
         '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ –≤ Rn': 3,
         '–ò–Ω—Ç–µ–≥—Ä–∞–ª –†–∏–º–∞–Ω–∞': 4,
         '–ú–µ—Ä–∞ –ñ–æ—Ä–¥–∞–Ω–∞': 5,
         '–ß–∏—Å–ª–æ–≤—ã–µ —Ä—è–¥—ã': 6},
    '–•–∏–º–∏—è':
        {
            '–ë–∏–ª–µ—Ç—ã 1-2': 1,
            '–ë–∏–ª–µ—Ç—ã 3,5': 2,
            '–ë–∏–ª–µ—Ç—ã 4,6': 3,
            '–ë–∏–ª–µ—Ç 7': 4,
            '–ë–∏–ª–µ—Ç 8': 5,
            '–ë–∏–ª–µ—Ç 9': 6,
            '–ë–∏–ª–µ—Ç—ã 10-11': 7,
            '–ë–∏–ª–µ—Ç 12': 8,
            '–ë–∏–ª–µ—Ç 13': 9,
            '–ë–∏–ª–µ—Ç 14': 10,
            '–ë–∏–ª–µ—Ç 15': 11,
            '–ë–∏–ª–µ—Ç 16': 12,
            '–ë–∏–ª–µ—Ç 17': 13,
            '–ë–∏–ª–µ—Ç 18-19': 14,
            '–ë–∏–ª–µ—Ç 20-21': 15,
            '–ë–∏–ª–µ—Ç 22': 16,
            '–ë–∏–ª–µ—Ç 24': 17,
            '–ë–∏–ª–µ—Ç 25': 18,
            '–ë–∏–ª–µ—Ç 26': 19,
            '–ë–∏–ª–µ—Ç 27': 20,
            '–ë–∏–ª–µ—Ç 23': 21,
            '–ë–∏–ª–µ—Ç 34': 22,
            '–ë–∏–ª–µ—Ç 35': 23,
            '–ë–∏–ª–µ—Ç 36': 24

        }
}

comms = ['help', 'start', 'flash_cards', 'figure_mnk', 'figure', 'mnk_constants', 'timetable', 'exam']

crazy_tokens = 0
ANSW_ID = 0

#Plot constants
PLOT_MESSEGE = 0
PLOT_BUTTONS = ['–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞', '–ü–æ–¥–ø–∏—Å—å –æ—Å–µ–π', '–ö—Ä–µ—Å—Ç—ã –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π', '–ì–æ—Ç–æ–≤–æ', 'M–ù–ö']


@bot.message_handler(commands=['remove_button'])
def button_delete(message):
    try:
        keyboard = types.ReplyKeyboardRemove
        bot.send_message(message.chat.id, '–£–±—Ä–∞–ª –≤—Å–µ –∫–Ω–æ–ø–∫–∏ !', reply_markup=keyboard)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ú–Ω–µ –Ω–µ—á–µ–≥–æ —É–±–∏—Ä–∞—Ç—å, –Ω–∏–∫–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –∏ —Ç–∞–∫ –Ω–µ—Çüòâ')


@bot.message_handler(commands=['help'])
def help_def(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '/help' –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞
    :param message: telebot.types.Message
    :return:
    """
    bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å ‚ò∫Ô∏è\n'
                                      '/figure - –•–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–æ—á–∫–∞–º ? –ù–µ –≤–æ–ø—Ä–æ—Å !\n'
                                      '/figure_mnk - –•–æ—á–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ª–∏–Ω–µ–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ú–ù–ö? –ó–∞–ø—Ä–æ—Å—Ç–æ !\n'
                                      '/mnk_constants - –ù—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä—è–º–æ–π –ø–æ –ú–ù–ö? –Ø –ø–æ–º–æ–≥—É !\n'
                                      '/timetable - –ó–∞–±—ã–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?) –ë—ã–≤–∞–µ—Ç, –ø–∏—à–∏, —è –ø–æ–º–æ–≥—É üòâüì±üì±üì±'
                                      '\n/exam - –ü–æ–¥—Å–∫–∞–∂—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤, –Ω–æ —Ç—ã —Å–∞–º –∑–∞—Ö–æ—Ç–µ–ª...'
                                      ' –Ø –Ω–µ –ª—é–±–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å'
                                      '–æ –ø–ª–æ—Ö–æ–º...\n'
                                      '/flash_cards - –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É... –Ø —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ/—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, –∞ '
                                      '—Ç—ã –ø–æ–ø—ã—Ç–∞–π—Å—è –≤—Å–ø–æ–º–Ω–∏—Ç—å –µ—ë. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–ø–æ–º–Ω–∏—à—å/–Ω–µ –≤—Å–ø–æ–º–Ω–∏—à—å –Ω–∞–∂–∏–º–∞–π "–ø–æ–∫–∞–∂–∏"'
                                      '—á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è\n'
                                      '/remove_button - –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–¥—Ä—É–≥ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É, —è —É–±–µ—Ä—É –≤—Å–µ –∫–Ω–æ–ø–∫–∏')


@bot.message_handler(commands=['start'])
def start(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–∞–Ω–¥–æ–π '/start' –∏ —à–ª—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ–º
    :param message: telebot.types.Message
    :return:
    """
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç üôÉ –Ø –æ—á–µ–Ω—å –ª—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º,'
                                      ' –Ω–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é. ')


@bot.message_handler(commands=['pb'])
def pb(message):
    bot.send_message(message.chat.id, '–•–æ—á–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ä–æ—á–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π ?)üìöüìö')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in SUBJECTS.keys()])
    msg = bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=keyboard)
    bot.register_next_step_handler(msg, sub)


def sub(message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π start, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
     –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é  paragraph()
    :param message: telebot.types.Message
    :return:
    """
    global Q_NUM, PATH, SUBJECT_NOW, SUBJECTS
    if message.text in SUBJECTS.keys():
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in SUBJECTS[message.text].keys()])
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–±–æ—Ç–∞—Ç—å ?', reply_markup=keyboard)
        SUBJECT_NOW = message.text
        bot.register_next_step_handler(msg, par)

    elif message.text == '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in SUBJECTS[SUBJECT_NOW].keys()])
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–±–æ—Ç–∞—Ç—å ?', reply_markup=keyboard)
        bot.register_next_step_handler(msg, par)

    elif message.text == '–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç' or message.text == '–í –¥—Ä—É–≥–æ–π —Ä–∞–∑...':
        keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â—ë !', reply_markup=keyboard)
        SUBJECT_NOW = ''

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ú–∞—Ç–∞–Ω', '–í –¥—Ä—É–≥–æ–π —Ä–∞–∑...']])
        msg = bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –º–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å ?', reply_markup=keyboard)
        bot.register_next_step_handler(msg, sub)


def par(message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π subject(). –û–Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param message: telebot.types.Message
    :return:
    """
    global Q_NUM, PATH, PAR_NUM, SUBJECTS, SUBJECT_NOW
    if (message.text in SUBJECTS[SUBJECT_NOW].keys()) or (message.text == '–ï—â—ë'):
        if message.text in SUBJECTS[SUBJECT_NOW].keys():
            PAR_NUM = SUBJECTS[SUBJECT_NOW][message.text]
        questions = pd.read_excel(f'{PATH}/flash_cards/{SUBJECTS_PATH[SUBJECT_NOW]}/{PAR_NUM}/flash_data.xlsx',
                                  header=None)
        d = np.array(questions)
        for i in range(0, len(d)):
            Q_NUM = i
            question = d[Q_NUM, 0]
            bot.send_message(message.chat.id, question)
            with open(f'{PATH}/flash_cards/{SUBJECTS_PATH[SUBJECT_NOW]}/{PAR_NUM}/{Q_NUM + 1}.png', 'rb') as photo:
                bot.send_photo(message.chat.id, photo)


@bot.message_handler(commands=['flash_cards'])
def flash_cards(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–∞–Ω–¥–æ–π '/flash_cards' –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
     –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞. –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä–æ–π
     –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∞–ª—å—à–µ –≤ callback_query_handler
    :param message: telebot.types.Message
    :return:
    """
    bot.send_message(message.chat.id, '–•–æ—á–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ä–æ—á–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π ?)üìöüìö')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in SUBJECTS.keys()])
    bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data in SUBJECTS.keys())
def subject(c):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç callback —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –∏–∑–º–µ–Ω—è–µ—Ç
     —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤.
    :param c: telebot.types.CallbackQuery
    :return:
    """
    global Q_NUM, PATH, SUBJECT_NOW, SUBJECTS
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in SUBJECTS[c.data].keys()])
    bot.edit_message_text(
        chat_id=c.message.chat.id,
        message_id=c.message.message_id,
        text='–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–±–æ—Ç–∞—Ç—å ?',
        parse_mode='Markdown',
        reply_markup=keyboard)
    SUBJECT_NOW = c.data


@bot.callback_query_handler(func=lambda c: (SUBJECT_NOW != '') or (c.data == '–ï—â—ë'))
def paragraph(c):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç callback —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    –∏ –∏–∑–º–µ–Ω—è–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.
    :param c: telebot.types.CallbackQuery
    :return:
    """
    global Q_NUM, PATH, PAR_NUM, SUBJECTS, SUBJECT_NOW, Q_SEQUENCE
    if ANSW_ID:
        bot.delete_message(c.message.chat.id, ANSW_ID)
    if c.data in SUBJECTS[SUBJECT_NOW].keys():
        PAR_NUM = SUBJECTS[SUBJECT_NOW][c.data]
    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions = pd.read_excel(f'{PATH}/flash_cards/{SUBJECTS_PATH[SUBJECT_NOW]}/{PAR_NUM}/flash_data.xlsx',
                              header=None)
    # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ numpy –º–∞—Å—Å–∏–≤
    questions = np.array(questions)
    if not Q_SEQUENCE:
        i = 0
        for q in questions:
            Q_SEQUENCE.append(i)
            i += 1
        random.shuffle(Q_SEQUENCE)
    Q_NUM = Q_SEQUENCE[0]
    Q_SEQUENCE.pop(0)
    question = questions[Q_NUM, 0]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–ü–æ–∫–∞–∂–∏']])
    bot.edit_message_text(
        chat_id=c.message.chat.id,
        message_id=c.message.message_id,
        text=question,
        parse_mode='Markdown',
        reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == '–ü–æ–∫–∞–∂–∏')
def answer(c):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç callback —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–∫–∞–∂–∏". –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    :param c: telebot.types.CallbackQuery
    :return:
    """
    global Q_NUM, PAR_NUM, ANSW_ID
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–ï—â—ë', '–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç']])
    with open(f'{PATH}/flash_cards/{SUBJECTS_PATH[SUBJECT_NOW]}/{PAR_NUM}/{Q_NUM + 1}.png', 'rb') as photo:
        bot.edit_message_text(
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            text='–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
            parse_mode='Markdown',
            reply_markup=keyboard)
        msg = bot.send_photo(c.message.chat.id, photo)
        ANSW_ID = msg.message_id


@bot.callback_query_handler(func=lambda c: c.data == '–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç')
def stop_cards(c):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç callback —Å —Ç–µ–∫—Å—Ç–æ–º "–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç". –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ–∞–Ω—Å –∏–≥—Ä—ã.
    :param c: telebot.types.CallbackQuery
    :return:
    """
    global ANSW_ID
    bot.edit_message_text(
        chat_id=c.message.chat.id,
        message_id=c.message.message_id,
        text='–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â—ë üòâ',
        parse_mode='Markdown')
    bot.delete_message(c.message.chat.id, ANSW_ID)


@bot.message_handler(commands=['figure_mnk'])
def figure_mnk(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/figure_mnk'. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é ax_x()
    :param message: telebot.types.Message
    :return:
    """
    global MESSAGE_COM
    bot.send_message(message.chat.id, '–°–Ω–æ–≤–∞ –ª–∞–±–∫–∏ –¥–µ–ª–∞–µ—à—å ?) –û—Ö —É–∂ —ç—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∏ !...'
                                      ' –°–µ–π—á–∞—Å –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –≤—Å—ë –ø–æ—Å—Ç—Ä–æ—é, —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤'
                                      'üòâ. –ò –Ω–µ –∑–∞—Å–∏–∂–∏–≤–∞–π—Å—è, –ª–æ–∂–∏—Å—å —Å–ø–∞—Ç—å))')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è']])
    msg = bot.send_message(message.chat.id, '–ö–∞–∫ –º—ã –Ω–∞–∑–æ–≤—ë–º –≥—Ä–∞—Ñ–∏–∫ ?'
                                            ' –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –Ω–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üòâ', reply_markup=keyboard)
    MESSAGE_COM = 'figure_mnk'
    bot.register_next_step_handler(msg, tit)


def tit(message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è ax_x(), –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞, –≤—ã–∑—ã–≤–∞–µ—Ç data_mnk()
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    if message.text == '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è':
        math_part.TITLE = ''
    else:
        math_part.TITLE = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['‚úÖ', '‚ùå']])
    msg = bot.send_message(message.chat.id, '–ü—Ä—è–º—É—é –ø–æ –ú–ù–ö —Å—Ç—Ä–æ–∏–º ?', reply_markup=keyboard)
    bot.register_next_step_handler(msg, mnk)


def mnk(message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è tit(), –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å—Ç—Ä–æ–∏—Ç—å –º–Ω–∫ –ø—Ä—è–º—É—é –∏–ª–∏ –Ω–µ—Ç. –í—ã–∑—ã–≤–∞–µ—Ç
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    if message.text == '‚úÖ':
        math_part.ERROR_BAR = True
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['0.0/0.0']])
        msg = bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–µ—Å—Ç–æ–≤ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π –ø–æ –æ—Å—è–º —Ö –∏ y –≤ '
                                                '—Ñ–æ—Ä–º–∞—Ç–µ "123.213/123.231", –µ—Å–ª–∏ –∫—Ä–µ—Å—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã,'
                                                ' –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=keyboard)
        bot.register_next_step_handler(msg, error_bars)
    elif message.text == '‚ùå':
        keyboard = types.ReplyKeyboardRemove()
        msg = bot.send_message(message.chat.id,
                               '–ü—Ä–∏—à–ª–∏ xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ', reply_markup=keyboard)
        bot.register_next_step_handler(msg, date_mnk)


def error_bars(message):
    math_part.ERRORS = list(map(float, message.text.split('/')))
    keyboard = types.ReplyKeyboardRemove()
    msg = bot.send_message(message.chat.id,
                           '–ü—Ä–∏—à–ª–∏ xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ', reply_markup=keyboard)
    bot.register_next_step_handler(msg, date_mnk)


def date_mnk(message):
    """
    –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞/–ª–∏–Ω–µ–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞/–ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
    —Ç–æ–≥–æ, –∫–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param message:
    :return:
    """
    file_id = message.json.get('document').get('file_id')
    file_path = bot.get_file(file_id).file_path
    downloaded_file = bot.download_file(file_path)
    src = message.document.file_name
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)
    a, b, d_a, d_b = math_part.mnk_calc(src)
    math_part.BOT_PLOT = True
    math_part.plots_drawer(src, math_part.TITLE, math_part.ERRORS[0], math_part.ERRORS[1], math_part.ERROR_BAR)
    with open('plot.pdf', 'rb') as photo:
        bot.send_document(message.chat.id, photo)
    for i in range(0, len(a)):
        bot.send_message(message.chat.id, f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã {i + 1}-–æ–π –ø—Ä—è–º–æ–π:\n"
                                          f" a = {a[i]} +- {d_a[i], 6}\n"
                                          f" b = {b[i]} +- {d_b[i], 6}")
    os.remove('plot.pdf')
    math_part.BOT_PLOT = False
    os.remove(src)
    math_part.TITLE = ''
    math_part.ERRORS = [0, 0]
    math_part.ERROR_BAR = False


@bot.message_handler(commands=['timetable'])
def get_group(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "/timetable".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_weekday().
    :param message: telebot.types.Message
    :return:
    """
    if message.text == '–õ–∞–¥–Ω–æ, —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä—é':
        keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, 'üòû', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–°–Ω–æ–≤–∞ –Ω–µ –º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å –∫–∞–∫–∞—è –ø–∞—Ä–∞ —Å–ª–µ–¥—É—é—â–∞—è?)'
                                          '–ù–∏—á–µ–≥–æ, —è —É–∂–µ —Ç—É—Ç!')
        keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id,
                         '–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã? (–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00-000)', reply_markup=keyboard)
        bot.register_next_step_handler(message, get_weekday)


def get_weekday(message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_schedule().
    :param message: telebot.types.Message
    :return:
    """
    global GROUP_NUM
    GROUP_NUM = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        *[types.KeyboardButton(name) for name in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']])
    msg = bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?', reply_markup=keyboard)
    bot.register_next_step_handler(msg, get_schedule)


def get_schedule(message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_timetable –∏–∑ –º–æ–¥—É–ª—è timetable,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞.
    :param message: telebot.types.Message
    :return:
    """
    if message.text in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']:
        timetable.timetable.get_timetable(GROUP_NUM, message.text)
        f = open(f'{PATH}/timetable/class.txt')
        msg = ''
        for line in f:
            bot.send_message(message.chat.id, line)
            msg += line
        open(f'{PATH}/timetable/class.txt', 'w').close()
        if msg != '':
            keyboard = types.ReplyKeyboardRemove()
            bot.send_message(message.chat.id, '–ß–µ–º —è –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=keyboard)
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑', '–õ–∞–¥–Ω–æ, —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä—é']])
            msg = bot.send_message(message.chat.id,
                                   '–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å... –¢—ã –º–Ω–µ —Ç–æ—á–Ω–æ –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ?',
                                   reply_markup=keyboard)
            bot.register_next_step_handler(msg, get_group)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑', '–õ–∞–¥–Ω–æ, —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä—é']])
        msg = bot.send_message(message.chat.id,
                               '–ö–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏–∑–≤–∏–Ω–∏, —è —Ç–∞–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—é... ?',
                               reply_markup=keyboard)
        bot.register_next_step_handler(msg, get_group)


@bot.message_handler(commands=['exam'])
def ask_group(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/exam'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_exam_timetable().
    :param message: telebot.types.Message
    :return:
    """
    if message.text == '–õ–∞–¥–Ω–æ, —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä—é':
        keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, 'üòû', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã? (–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00-000)')
        bot.register_next_step_handler(message, get_exam_timetable)


def get_exam_timetable(message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_exam_timetable –∏–∑ –º–æ–¥—É–ª—è timetable,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
    :param message: telebot.types.Message
    :return:
    """
    if message.text in texting.texting_symbols.groups:
        timetable.timetable.get_exam_timetable(message.text)
        f = open(f'{PATH}/timetable/exam.txt')
        for line in f:
            bot.send_message(message.chat.id, line)
        open(f'{PATH}/timetable/exam.txt', 'w').close()
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑', '–õ–∞–¥–Ω–æ, —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä—é']])
        msg = bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å... '
                                                '–¢—ã –º–Ω–µ —Ç–æ—á–Ω–æ –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ?',
                               reply_markup=keyboard)
        bot.register_next_step_handler(msg, ask_group)


@bot.message_handler(content_types=['text'])
def chatting(message):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ª—é–±–æ–π –Ω–µ–∑–Ω–∞–∫–æ–º—ã–π –±–æ—Ç—É —Ç–µ–∫—Å—Ç.
    :param message: any text
    :return: —Ü–∏–∫–ª–∏—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–≤–∞ —Å–º–∞–π–ª–∏–∫–∞,
    –¥–≤–µ —Ü–∏—Ç–∞—Ç—ã, –æ–¥–Ω—É —Ñ–æ—Ç–∫—É —Å–æ–±–∞–∫–∏ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    """
    global crazy_tokens, PATH
    crazy_tokens += 1
    if crazy_tokens <= 1:
        bot.send_message(message.chat.id, '–ë–æ—é—Å—å, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, –æ —á—ë–º —Ç—ã. \n'
                                          '–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.\n')
    elif crazy_tokens <= 3:
        bot.send_message(message.chat.id, random.choice(texting.texting_symbols.emoji))
    elif crazy_tokens <= 5:
        bot.send_message(message.chat.id, random.choice(texting.texting_symbols.quotes))
    elif crazy_tokens == 6:
        doggy = get_image_url()
        '''
        API_LINK = 'http://api.forismatic.com/api/method=getQuote&format=text&lang=ru'
        cont = requests.post(API_LINK)
        print(cont.text)
        bot.send_message(message.chat.id, quote)
        '''

        bot.send_photo(message.chat.id, photo=doggy)
        crazy_tokens = 0


def get_url():
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ–±–∞–∫–∏
    :return: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
    """
    contents = requests.get('https://random.dog/woof.json').json()
    url = contents['url']
    return url


def get_image_url():
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Å–æ–±–∞–∫–æ–π
    :return: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
    """
    allowed_extension = ['jpg', 'jpeg', 'png']
    file_extension = ''
    while file_extension not in allowed_extension:
        url = get_url()
        file_extension = re.search("([^.]*)$", url).group(1).lower()
    return url


bot.polling()
