import openpyxl
import pandas as pd
import pickle
from data_constructor import psg


def within_range(bounds: tuple, cell: openpyxl.cell) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è, –≤—Ö–æ–¥–∏—Ç –ª–∏ –∫–ª–µ—Ç–∫–∞ –≤ —Å–æ—Å—Ç–∞–≤ –±–æ–ª—å—à–æ–π —Å–ª–∏—Ç–æ–π –∏–ª–∏ –Ω–µ—Ç.
    :param bounds: –≥—Ä–∞–Ω–∏—Ü—ã merged –∫–ª–µ—Ç–æ–∫
    :param cell: —Å–∞–º–∞ –∫–ª–µ—Ç–∫–∞
    :return: True, –µ—Å–ª–∏ merged –∫–ª–µ—Ç–∫–∞, –∏–Ω–∞—á–µ False
    """
    column_start, row_start, column_end, row_end = bounds  # –≥—Ä–∞–Ω–∏—Ü—ã merged –∫–ª–µ—Ç–∫–∏
    row = cell.row  # –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ –≤ —ç—Ç–æ–º —Å–ª–∏—è–Ω–∏–∏
    if row_start <= row <= row_end:  #              ___________________
        column = cell.column  #                     |value|empty|empty|
        if column_start <= column <= column_end:  # |empty|empty|empty|  –ü—Ä–∏–º–µ—Ä merged –∫–ª–µ—Ç–∫–∏
            return True  #                          |empty|empty|empty|
    return False  #


def get_value_merged(sheet: openpyxl.worksheet, cell: openpyxl.cell) -> any:
    """
    –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–µ–∂–∞—â–µ–µ –≤ –∫–ª–µ—Ç–∫–µ, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ merged, –∏–ª–∏ –Ω–µ—Ç.
    :param sheet: —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    :param cell: –∫–ª–µ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    :return: –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–µ–∂–∞—â–µ–µ –≤ –∫–ª–µ—Ç–∫–µ
    """
    for merged in sheet.merged_cells:  # —Å–º–æ—Ç—Ä–∏–º –≤ —Å–ø–∏—Å–∫–µ —Å–ª–∏—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö openpyxl.worksheet)
        if within_range(merged.bounds, cell):
            return sheet.cell(merged.min_row, merged.min_col).value  # —Å–º–æ—Ç—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–µ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–ª–µ—Ç–∫–µ
    return cell.value


def get_timetable(table: openpyxl.worksheet):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—ã–¥–µ–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    :param table: —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    :return:
    """
    for j in range(3, table.max_column + 1):  # —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
        name = table.cell(1, j).value  # –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        if name in ['–î–Ω–∏', '–ß–∞—Å—ã']:  # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü
            continue
        # –∏–Ω–∞—á–µ –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü - —ç—Ç–æ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        elif name is not None:
            if type(name) == int:  # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
                name = str(name)
            # group - —Å–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –≥—Ä—É–ø–ø—ã
            group = dict(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫={}, –í—Ç–æ—Ä–Ω–∏–∫={}, –°—Ä–µ–¥–∞={}, –ß–µ—Ç–≤–µ—Ä–≥={}, –ü—è—Ç–Ω–∏—Ü–∞={}, –°—É–±–±–æ—Ç–∞={}, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ={})
            for k in range(2, table.max_row + 1):  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç–æ–ª–±—Ü—É
                # –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ (–Ω–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
                if get_value_merged(table, table.cell(k, 1)) in group.keys():
                    day = get_value_merged(table, table.cell(k, 1))  # –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                    time = get_value_merged(table, table.cell(k, 2))  # –∫–ª–µ—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    pair = get_value_merged(table, table.cell(k, j))  # –∫–ª–µ—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—ã

                    # —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª–µ—Ç–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –ø–∞—Ä—ã, —Ç–∞–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏
                    if (time, pair) != (None, None):
                        time = time.split()  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É hh:mm ‚Äì hh:mm
                        if len(time[0][:-2]) == 1:
                            time[0] = '0' + time[0]
                        time = time[0][:-2] + ':' + time[0][-2:] + ' ‚Äì ' + time[2][:-2] + ':' + time[2][-2:]
                        group[day][time] = pair  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

            group = pd.DataFrame(group)  # –∑–∞–º–µ–Ω—è–µ–º None –Ω–∞ —Å–ø—è—â–∏–µ —Å–º–∞–π–ª–∏–∫–∏
            group.replace(to_replace=[None], value='üò¥', inplace=True)
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            psg.insert_group(name, pickle.dumps(group, protocol=pickle.HIGHEST_PROTOCOL))
    # else:  TODO!!! –¥–æ–ø–∏—Å–∞—Ç—å –∑–∞–ø–∏—Å—å "–≥—Ä—É–ø–ø—ã" –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    #     psg.insert_group('ALUMNI', )
