import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from data_constructor import psg
from math_module import math_part
from koryavov import kor
from data_constructor import psg
import timetable.timetable
import datetime

logging.basicConfig(level=logging.INFO)

API_TOKEN = '893576564:AAHxlCPFCfcewfz2_0rlygYfJzCbhz4HYJs'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    choose_group = State()
    my_group = State()
    course = State()
    group = State()
    weekday = State()
    student = {'Group': 'None', 'Course': 'None'}


@dp.message_handler(commands=['help'])
async def help_def(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π '/help' –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞
    :param message: telebot.types.Message
    :return:
    """
    with open('txt_files/help.txt', encoding='utf-8', mode='r') as f:
        text = f.read()
    await bot.send_message(message.chat.id, text)


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    """
    Conversation's entry point
    """
    # Set state
    await Form.course.set()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(str(name)) for name in range(1, 6)])  # –∫–Ω–æ–ø–∫–∏ c –Ω–æ–º–µ—Ä–∞–º–∏ –∫—É—Ä—Å–æ–≤
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç üôÉ –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ú–µ–Ω—è –∑–æ–≤—É—Ç A2.'
                                            ' –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ,'
                                            ' —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?'
                                            ' –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫—É—Ä—Å–∞.', reply_markup=keyboard)


# Check course number. Age gotta be digit from 1 to 4
@dp.message_handler(lambda message: not message.text.isdigit() or not 1 <= int(message.text) < 5, state=Form.course)
async def process_age_invalid(message: types.Message):
    """
    –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    """
    return await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(lambda message: message.text.isdigit(), state=Form.course)
async def process_name(message: types.Message):
    """
    –ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ –∫—É—Ä—Å–∞
    """
    Form.student['Course'] = message.chat.id
    await Form.group.set()
    keyboard = types.ReplyKeyboardRemove()
    await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã?\n'
                                            '(–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00‚Äì228 –∏–ª–∏ 777, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)', reply_markup=keyboard)


@dp.message_handler(state=Form.group)
async def process_age(message: types.Message, state: FSMContext):
    psg.insert_data(message.chat.id, message.text, int(Form.student['Course']))
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
    await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å üôÉ –Ø –æ—á–µ–Ω—å –ª—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º, –Ω–∞–ø–∏—à–∏ '
                                            '/help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é. ', reply_markup=keyboard)
    await state.finish()


@dp.message_handler(Text(equals='–í—ã—Ö–æ–¥'), state='*')
async def user_exit(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –≤—ã—Ö–æ–¥ –ø–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏).
    """
    current_state = await state.get_state()  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–æ —Ö–æ—Ç—è –±—ã –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state is None:
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
    await bot.send_message(message.chat.id, '–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –ù–æ —Ç—ã —ç—Ç–æ, –∑–∞—Ö–æ–¥–∏, –µ—Å–ª–∏ —á—Ç–æ üòâ', reply_markup=keyboard)
    # —Å—Ç–∏–∫–æ—Å "–¢—ã –∑–∞—Ö–æ–¥–∏ –µ—Å—á–æ"
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIsCV42vjU8mR9P-zoPiyBu_3_eG-wTAAIMDQACkjajC9UvBD6_RUE4GAQ')

    # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()


@dp.message_handler(Text(equals=['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']), state='*')
async def get_start_schedule(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞".
    –£–∑–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –∏ –ø–æ —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é timetable_by_group().
    :return:
    """
    student = psg.get_student(message.chat.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if timetable.timetable.check_group(student[0], student[1]):
        # —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –¥–ª—è —É–¥–æ–±–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (0, 1, ..., 6) –≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
        week = tuple(['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'])
        today = datetime.datetime.today().weekday()  # today - –∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–æ—Ç 0 –¥–æ 6)
        if message.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è':  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            schedule = timetable.timetable.timetable_by_group(student[1], student[0], week[today])
            STRING = ''  # "—Å—Ç—Ä–æ–∫–∞" —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for row in schedule.iterrows():  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∏–ø–ª—é—Å–æ–≤—ã–≤–∞–µ–º –∏—Ö –≤ –æ–±—â—É—é "—Å—Ç—Ä–æ–∫—É"
                # –≤—Ä–µ–º—è –ø–∞—Ä—ã - –∂–∏—Ä–Ω—ã–π + –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                string: str = '<b>' + '<i>' + row[0] + '</i>' + '</b>' + '\n' + row[1][0]
                STRING += string + '\n\n'  # –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –ø—Ä–æ–ø—É—Å–∫ (1 enter)
            # parse_mode - —á—Ç–æ–±—ã —á–∏—Ç–∞–ª –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
            await bot.send_message(message.chat.id, STRING, parse_mode='HTML')
            # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
            await bot.send_message(message.chat.id, '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=keyboard)
        elif message.text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞':  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow = 0  # –Ω–æ–º–µ—Ä –¥–Ω—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6), —Ç–æ —É–∂–µ —Å—Ç–æ–∏—Ç (0)
            if today in range(6):  # –µ—Å–ª–∏ –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ today + 1
                tomorrow = today + 1
            schedule = timetable.timetable.timetable_by_group(student[1], student[0], week[tomorrow])
            STRING = ''  # "—Å—Ç—Ä–æ–∫–∞" —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for row in schedule.iterrows():  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∏–ø–ª—é—Å–æ–≤—ã–≤–∞–µ–º –∏—Ö –≤ –æ–±—â—É—é "—Å—Ç—Ä–æ–∫—É"
                # –≤—Ä–µ–º—è –ø–∞—Ä—ã - –∂–∏—Ä–Ω—ã–π + –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                string: str = '<b>' + '<i>' + row[0] + '</i>' + '</b>' + '\n' + row[1][0]
                STRING += string + '\n\n'  # –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –ø—Ä–æ–ø—É—Å–∫ (1 enter)
            # parse_mode - —á—Ç–æ–±—ã —á–∏—Ç–∞–ª –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
            await bot.send_message(message.chat.id, STRING, parse_mode='HTML')
            # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
            await bot.send_message(message.chat.id, '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=keyboard)
    else:  # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞
        await bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –Ω–æ–º–µ—Ä–∞ –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã üòû '
                                                '–ù–∞–∂–º–∏ /profile —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.')


@dp.message_handler(commands='timetable')
async def initiate_timetable(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "/timetable".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã –µ–º—É –Ω—É–∂–Ω–æ.
    """
    await Form.choose_group.set()  # —Å—Ç–∞–≤–∏–º 1 —Å–æ—Å—Ç–æ—è–Ω–∏–µ - choose_group

    await bot.send_message(message.chat.id, '–°–Ω–æ–≤–∞ –Ω–µ –º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–∞—è –ø–∞—Ä–∞ —Å–ª–µ–¥—É—é—â–∞—è?\n–ù–∏—á–µ–≥–æ, —è —É–∂–µ —Ç—É—Ç! üòâ')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥']])
    await bot.send_message(message.chat.id, '–¢–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ '
                                            '–∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π?', reply_markup=keyboard)


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥'],
                    state=Form.choose_group, content_types=types.message.ContentType.ANY)
async def initiate_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–ú–æ—è –≥—Ä—É–ø–ø–∞', '–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ (+ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è).
    """
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals='–ú–æ—è –≥—Ä—É–ø–ø–∞'), state=Form.choose_group)
async def process_my_group_weekday(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω—É–∂–Ω–æ–º –¥–Ω–µ –Ω–µ–¥–µ–ª–∏.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ "/profile".
    """
    await Form.my_group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ my_group

    student = psg.get_student(message.chat.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if timetable.timetable.check_group(student[0], student[1]):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ª–æ–≤)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']])
        keyboard.add(*[types.KeyboardButton(name) for name in ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥']])
        await bot.send_message(message.chat.id,
                               '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?',
                               reply_markup=keyboard)
    else:  # –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True)  # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
        await bot.send_message(message.chat.id,
                               '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –Ω–æ–º–µ—Ä–æ–≤ –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã üòû\n'
                               '–ù–∞–∂–º–∏ /profile —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.',
                               reply_markup=keyboard)
        await state.finish()  # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                                            '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
                    state=Form.my_group,
                    content_types=types.message.ContentType.ANY)
async def process_my_group_weekday_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                                                           '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.
    """
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']),
                    state=Form.my_group)
async def return_my_group_schedule(message: types.Message, state: FSMContext):
    student = psg.get_student(message.chat.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞
    schedule = timetable.timetable.timetable_by_group(student[1], student[0], message.text)
    STRING = ''  # "—Å—Ç—Ä–æ–∫–∞" —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for row in schedule.iterrows():  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∏–ø–ª—é—Å–æ–≤—ã–≤–∞–µ–º –∏—Ö –≤ –æ–±—â—É—é "—Å—Ç—Ä–æ–∫—É"
        # –≤—Ä–µ–º—è –ø–∞—Ä—ã - –∂–∏—Ä–Ω—ã–π + –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        string: str = '<b>' + '<i>' + row[0] + '</i>' + '</b>' + '\n' + row[1][0]
        STRING += string + '\n\n'  # –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –ø—Ä–æ–ø—É—Å–∫ (1 enter)
    await bot.send_message(message.chat.id, STRING, parse_mode='HTML')  # parse_mode - —á—Ç–æ–±—ã —á–∏—Ç–∞–ª –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
    keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
    await bot.send_message(message.chat.id, '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=keyboard)

    await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(Text(equals='–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞'), state=Form.choose_group)
async def get_course(message: types.Message):
    await Form.course.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ course

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in map(str, range(1, 4))])  # –∫–Ω–æ–ø–∫–∏ c –Ω–æ–º–µ—Ä–∞–º–∏ –∫—É—Ä—Å–æ–≤
    keyboard.add(*[types.KeyboardButton(name) for name in map(str, [4, 5, '–í—ã—Ö–æ–¥'])])  # –∏ –≤—ã—Ö–æ–¥
    await bot.send_message(message.chat.id, '–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞?', reply_markup=keyboard)


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or (not message.text.isdigit() and message.text != '–í—ã—Ö–æ–¥')
                    or not 1 <= int(message.text) <= 5,
                    state=Form.course,
                    content_types=types.message.ContentType.ANY)
async def process_course_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    """
    await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(Text(equals=list(map(str, range(1, 6)))), state=Form.course)
async def process_course(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã.
    """
    async with state.proxy() as data:
        data['course'] = message.text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞

    await Form.group.set()  # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ group
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])  # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    await bot.send_message(message.chat.id,  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
                           '–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã?\n'
                           '(–í —Ñ–æ—Ä–º–∞—Ç–µ –ë00‚Äì228 –∏–ª–∏ 777, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)',
                           reply_markup=keyboard)


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT,
                    state=Form.group,
                    content_types=types.message.ContentType.ANY)
async def process_group_invalid_type(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
    """
    await message.reply("–ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(state=Form.group)
async def process_group(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—ã –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ï—Å–ª–∏ —Ç–∞–∫–∞—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å –æ –Ω—É–∂–Ω–æ–º –¥–Ω–µ –Ω–µ–¥–µ–ª–∏, –∏–Ω–∞—á–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ.
    """
    async with state.proxy() as data:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–æ–π –ø–∞—Ä—ã –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        if timetable.timetable.check_group(message.text, data['course']):
            data['group'] = message.text  # –µ—Å–ª–∏ —Ç–∞–∫–∞—è –ø–∞—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
            await Form.weekday.set()  # –∏ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ weekday
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ª–æ–≤)
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']])
            keyboard.add(*[types.KeyboardButton(name) for name in ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥']])
            await bot.send_message(message.chat.id,
                                   '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?',
                                   reply_markup=keyboard)
        else:  # –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–∞–∫–æ–π –ø–∞—Ä—ã –∫—É—Ä—Å-–≥—Ä—É–ø–ø–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*[types.KeyboardButton(name) for name in ['–í—ã—Ö–æ–¥']])  # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
            await bot.send_message(message.chat.id,
                                   '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã üòû\n'
                                   '–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)',
                                   reply_markup=keyboard)


@dp.message_handler(lambda message: message.content_type != types.message.ContentType.TEXT
                    or message.text not in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                                            '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
                    state=Form.weekday,
                    content_types=types.message.ContentType.ANY)
async def process_weekday_invalid(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                                                           '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–í—ã—Ö–æ–¥'],
    –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.
    """
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)")


@dp.message_handler(state=Form.weekday)
async def return_schedule(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
    """
    async with state.proxy() as data:
        data['weekday'] = message.text  # –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –≤—ã—à–µ
        schedule = timetable.timetable.timetable_by_group(data['course'], data['group'], data['weekday'])
        STRING = ''  # "—Å—Ç—Ä–æ–∫–∞" —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for row in schedule.iterrows():  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∏–ø–ª—é—Å–æ–≤—ã–≤–∞–µ–º –∏—Ö –≤ –æ–±—â—É—é "—Å—Ç—Ä–æ–∫—É"
            # –≤—Ä–µ–º—è –ø–∞—Ä—ã - –∂–∏—Ä–Ω—ã–π + –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
            string: str = '<b>' + '<i>' + row[0] + '</i>' + '</b>' + '\n' + row[1][0]
            STRING += string + '\n\n'  # –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –ø—Ä–æ–ø—É—Å–∫ (1 enter)
        await bot.send_message(message.chat.id, STRING, parse_mode='HTML')  # parse_mode - —á—Ç–æ–±—ã —á–∏—Ç–∞–ª –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
        await bot.send_message(message.chat.id, '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=keyboard)

    await state.finish()  # –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π


@dp.message_handler(commands=['exam'])
async def initiate_exam_timetable(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '/exam'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_exam_timetable().
    :param message: telebot.types.Message
    :return:
    """
    await bot.send_message(message.chat.id, '–ï—â—ë –Ω–µ –≤—Ä–µ–º—è... –ù–æ —Ç—ã –Ω–µ –∑–∞–±—ã–≤–∞–π...')
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAMEXj8IxnJkYATlpAOTkJyLiXH2u0UAAvYfAAKiipYBsZcZ_su45LkYBA')


# def get_exam_timetable(message):
#     """
#     –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_exam_timetable –∏–∑ –º–æ–¥—É–ª—è timetable,
#     –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
#     :param message: telebot.types.Message
#     :return:
#     """
#     if message.text in texting.texting_symbols.groups:
#         path = os.path.abspath('')
#         timetable.timetable_old.get_exam_timetable(message.text)
#         f = open(f'{path}/timetable/exam.txt')
#         for line in f:
#             bot.send_message(message.chat.id, line)
#         open(f'{path}/timetable/exam.txt', 'w').close()
#     else:
#         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         keyboard.add(*[types.KeyboardButton(name) for name in ['–ü–æ–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑', '–õ–∞–¥–Ω–æ, —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä—é']])
#         msg = bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å... '
#                                                 '–¢—ã –º–Ω–µ —Ç–æ—á–Ω–æ –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ?',
#                                reply_markup=keyboard)
#         bot.register_next_step_handler(msg, ask_group)


executor.start_polling(dp, skip_updates=True)
